from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, CommandHandler, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import BotCommand
import datetime
import asyncio
import os
import random
import json
import requests
import re
import nest_asyncio
nest_asyncio.apply()


user_cache = {}  # –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏

# üóùÔ∏è –ü—É–ª Groq API –∫–ª—é—á–µ–π
groq_keys = [
    "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",
    "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",
    "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"
]

# üî¢ –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞
groq_key_index = 0



def load_user_json(user_id):
    if user_id in user_cache:
        return user_cache[user_id]
    filepath = f"user_data/{user_id}.json"
    if os.path.exists(filepath):
        with open(filepath, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = {"start_date": str(datetime.date.today()), "reports": [], "username": None}
    user_cache[user_id] = data
    return data

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏ –æ—Ç—á—ë—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é.")

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º: @Mihailstryzkov")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/support ‚Äî –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é"
    )

    help_text = (
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help ‚Äî –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞\n"
        "‚óè –¥–µ–Ω—å ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å\n"
        "‚óè –æ—Ç—á—ë—Ç ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç\n"
        "‚óè –∏—Å—Ç–æ—Ä–∏—è ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á—ë—Ç—ã\n"
        "‚óè –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ ‚Äî –í–æ–ø—Ä–æ—Å –∫ –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç!"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')

# async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     help_text = (
#         "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
#         "/start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
#         "/help ‚Äî –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞\n"
#         "‚óè –¥–µ–Ω—å ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å\n"
#         "‚óè –æ—Ç—á—ë—Ç ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç\n"
#         "‚óè –∏—Å—Ç–æ—Ä–∏—è ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á—ë—Ç—ã\n"
#         "‚óè –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ ‚Äî –í–æ–ø—Ä–æ—Å –∫ –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É\n\n"
#         "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç!"
#     )
#     await update.message.reply_text(help_text, parse_mode='HTML')

def load_bro_messages():
    path = "bro_messages.json"
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                content = f.read().strip()
                return json.loads(content) if content else []
        except json.JSONDecodeError:
            return []
    return []

def save_bro_message(text):
    messages = load_bro_messages()
    messages.append(text)
    with open("bro_messages.json", "w", encoding="utf-8") as f:
        json.dump(messages, f, ensure_ascii=False, indent=2)

def autosave_all_users():
    for user_id, data in user_cache.items():
        save_user_json(user_id, data)
    print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

def save_user_json(user_id, data):
    user_cache[user_id] = data  # –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    filepath = f"user_data/{user_id}.json"
    with open(filepath, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ü–∞–º—è—Ç—å
user_data = {}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user_id = update.effective_user.id
    username = update.effective_user.username  # ‚Üê –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    data = load_user_json(user_id)

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—è–≤–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è username ‚Äî –æ–±–Ω–æ–≤–∏–º
    if username and data.get("username") != username:
        data["username"] = username
        save_user_json(user_id, data)

    user_data[user_id] = data  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å

    keyboard = [["–î–µ–Ω—å", "–°–±—Ä–æ—Å"], ["–û—Ç—á—ë—Ç", "–ò—Å—Ç–æ—Ä–∏—è"], ["–°–æ—Ä–≤–∞—Ç—å—Å—è —Ö–æ—á—É", "–ü–∏—Å—å–º–æ –±—Ä–∞—Ç—É"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"üëä –ü—Ä–∏–≤–µ—Ç, @{username if username else '–¥—Ä—É–≥'}! –Ø —Ç–≤–æ–π –∞–Ω—Ç–∏—Å–ª–∏–≤-–±–æ—Ç. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤—Ä—É—á–Ω—É—é.",
        reply_markup=markup
    )

#–†–ê–ù–î–û–ú–ù–´–ï –§–†–ê–ó–´
support_phrases = [
    "üõë –°–¥–µ–ª–∞–π –ø–∞—É–∑—É. –î—ã—à–∏. –¢—ã –Ω–µ –æ–±—è–∑–∞–Ω —Å–ª–∏–≤–∞—Ç—å—Å—è.",
    "üî• –ò–º–ø—É–ª—å—Å ‚Äî —ç—Ç–æ –≤–æ–ª–Ω–∞. –ü–µ—Ä–µ–∂–¥–∏. –¢—ã —Å–∏–ª—å–Ω–µ–µ.",
    "üí™ –ü–µ—Ä–µ–∫–ª—é—á–∏—Å—å: 10 –æ—Ç–∂–∏–º–∞–Ω–∏–π, —Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞, –≤—ã—Ö–æ–¥ –Ω–∞ —É–ª–∏—Ü—É.",
    "üß† –°—Ä—ã–≤ –Ω–µ –¥–∞—ë—Ç –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ –≤–∏–Ω—ã. –ü–æ–±–µ–¥–∞ ‚Äî –¥–∞—ë—Ç —Å–∏–ª—É.",
    "üéØ –¢—ã —É–∂–µ –Ω–∞ –ø—É—Ç–∏. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –∫–∞–∫ –º–µ—á –≤ –Ω–æ–∂–Ω–∞—Ö. –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–π –µ–≥–æ.",
    "üöø –ü—Ä–∏–º–∏ –¥—É—à. –ü—Ä–æ–≥—É–ª—è–π—Å—è. –ù–∞–ø–∏—à–∏ –º–Ω–µ –æ—Ç—á—ë—Ç –≤–º–µ—Å—Ç–æ —Å–ª–∏–≤–∞.",
    "üîÅ –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Ç—É–¥–∞, –æ—Ç–∫—É–¥–∞ —Ç–∞–∫ —Ç—è–∂–µ–ª–æ –≤—ã–ª–µ–∑–∞–ª.",
    "üõë –°—Ç–æ–ø. –¢—ã –Ω–∞ –≥—Ä–∞–Ω–∏, –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n\n üîπ –°–¥–µ–ª–∞–π 5 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤\n üîπ 20 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –∏–ª–∏ 10 –æ—Ç–∂–∏–º–∞–Ω–∏–π\n üîπ –í—ã–ø–µ–π –≤–æ–¥—ã –∏ –≤—ã–π–¥–∏ –Ω–∞ —É–ª–∏—Ü—É\n\n –¢—ã —Å–∏–ª—å–Ω–µ–µ —ç—Ç–æ–≥–æ –∏–º–ø—É–ª—å—Å–∞. –Ø —Å —Ç–æ–±–æ–π. –ù–µ —Å–¥–∞–≤–∞–π—Å—è üí™"
]

# –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text.strip().lower()
    user_id = update.effective_user.id

    if msg == "–¥–µ–Ω—å":
        data = load_user_json(user_id)
        start = datetime.date.fromisoformat(data["start_date"])
        days = (datetime.date.today() - start).days
        await update.message.reply_text(f"üìÖ –¢—ã —É–∂–µ –¥–µ—Ä–∂–∏—à—å—Å—è {days} –¥–Ω–µ–π!")

    elif msg == "—Å–±—Ä–æ—Å":
        data = load_user_json(user_id)  # –∑–∞–≥—Ä—É–∑–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞/—Ñ–∞–π–ª–∞
        data["start_date"] = str(datetime.date.today())  # –æ–±–Ω–æ–≤–∏–ª–∏ –¥–∞—Ç—É
        save_user_json(user_id, data)  # —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –Ω–∞–∑–∞–¥
        await update.message.reply_text("üîÅ –î–µ–Ω—å –æ–±–Ω—É–ª—ë–Ω. –ù–∞—á–Ω–∏ —Å –Ω–æ–≤–æ–π —Å–∏–ª—ã!")

    elif msg == "–æ—Ç—á—ë—Ç":
        await update.message.reply_text("üìù –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –Ø –∑–∞–ø–∏—à—É.")
        context.user_data["awaiting_report"] = True

    elif context.user_data.get("awaiting_report"):
        data = load_user_json(user_id)
        today = str(datetime.date.today())

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        if len(update.message.text) > 333:
            await update.message.reply_text("‚ùóÔ∏è–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç—á—ë—Ç. –ú–∞–∫—Å–∏–º—É–º ‚Äî 333 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        # # –ü—Ä–æ–≤–µ—Ä–∫–∞: –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç—á—ë—Ç —Å–µ–≥–æ–¥–Ω—è
        # if any(report["date"] == today for report in data.get("reports", [])):
        #     await update.message.reply_text("üìå –¢—ã —É–∂–µ –ø–∏—Å–∞–ª –æ—Ç—á—ë—Ç —Å–µ–≥–æ–¥–Ω—è. –ú–æ–ª–æ–¥–µ—Ü!")
        #     context.user_data["awaiting_report"] = False
        #     return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        report_text = f"{today}: {update.message.text}"
        data.setdefault("reports", []).append(report_text)
        save_user_json(user_id, data)

        await update.message.reply_text("‚úÖ –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–π –æ—Ç—á—ë—Ç. –ì–æ—Ä–¥ —Ç–æ–±–æ–π.")
        context.user_data["awaiting_report"] = False

    elif msg == "–∏—Å—Ç–æ—Ä–∏—è":
        data = load_user_json(user_id)  # –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞
        reports = data.get("reports", [])  # —Å–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)

        if reports:
            last = reports[-3:] if len(reports) > 3 else reports
            reply_text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á—ë—Ç—ã:\n\n" + "\n".join(last)
            await update.message.reply_text(reply_text)
        else:
            await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞.")

    elif msg == "—Å–æ—Ä–≤–∞—Ç—å—Å—è —Ö–æ—á—É":
        support = random.choice(support_phrases)  # –≤—ã–±–∏—Ä–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
        bros = load_bro_messages()  # –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        letter = f"\n\nüì® –ü–∏—Å—å–º–æ –æ—Ç –±—Ä–∞—Ç–∞:\n‚Äú{random.choice(bros)}‚Äù" if bros else ""  # –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø–∏—Å—å–º–∞ –µ—Å—Ç—å
        await update.message.reply_text(support + letter)

    elif msg == "–ø–∏—Å—å–º–æ –±—Ä–∞—Ç—É":
        await update.message.reply_text(
            "üíå –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –º—É–∂—á–∏–Ω—ã. –û–Ω–æ –±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç—Ä—É–¥–Ω—ã–π –º–æ–º–µ–Ω—Ç."
        )
        context.user_data["writing_bro_letter"] = True

    elif context.user_data.get("writing_bro_letter"):
        save_bro_message(update.message.text)
        await update.message.reply_text(
            "‚úÖ –¢–≤–æ—ë –ø–∏—Å—å–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –û–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç –∫–æ–≥–æ-—Ç–æ –≤ —Ç—Ä—É–¥–Ω—ã–π –º–æ–º–µ–Ω—Ç. –°–ø–∞—Å–∏–±–æ üôè")
        context.user_data["writing_bro_letter"] = False

    else:
        # –ó–ê–ì–†–£–ñ–ê–ï–ú –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        data = load_user_json(user_id)
        import time
        last_time = data.get("last_ai_request")
        now = time.time()

        # –ï–°–õ–ò –ü–†–û–®–õ–û –ú–ï–ù–¨–®–ï 30 –°–ï–ö–£–ù–î ‚Äî –û–¢–ö–ê–ó
        if last_time and now - last_time < 10:
            wait = int(10 - (now - last_time))
            await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {wait} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.")
            return

        # ‚¨áÔ∏è –í–æ—Ç –∑–¥–µ—Å—å ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å—ë –æ–∫, —Ç–æ–≥–¥–∞ –ø–∏—à–µ–º ¬´–î—É–º–∞—é...¬ª
        await update.message.reply_text("ü§ñ –î—É–º–∞—é...")

        global groq_key_index  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á
        current_key = groq_keys[groq_key_index]
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å, –∞ –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
        groq_key_index = (groq_key_index + 1) % len(groq_keys)
        headers = {
            "Authorization": f"Bearer {current_key}",
            "Content-Type": "application/json"
        }
        data_request = {
            "model": "llama3-70b-8192",
            "messages": [
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –¥–ª—è –º—É–∂—á–∏–Ω. –û–±—â–∞–π—Å—è –∫–∞–∫ –î—ç–≤–∏–¥ –ì–æ–≥–≥–∏–Ω—Å ‚Äî —Å—Ç—Ä–æ–≥–æ, –º—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ, –ø–æ –¥–µ–ª—É. –û—Ç–≤–µ—á–∞–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ-—Ä—É—Å—Å–∫–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –ª–∞—Ç–∏–Ω–∏—Ü—É, –∞—Ä–∞–±—Å–∫–∏–µ –∏–ª–∏ –∫–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π, —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è. –ì–æ–≤–æ—Ä–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ, —Å–æ–±–ª—é–¥–∞—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ª–æ–≤ –∏ –ø–∞–¥–µ–∂–∏. –í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–π –º—ã—Å–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî –Ω–µ –æ–±—Ä—ã–≤–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –°–ª–æ–≤–∞ –≤—Ä–æ–¥–µ '—á—Ç–æ-—Ç–æ', '–≥–¥–µ-—Ç–æ', '–∫–æ–≥–¥–∞-—Ç–æ', '–∫—Ç–æ-—Ç–æ' –≤—Å–µ–≥–¥–∞ –ø–∏—à–∏ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å, –∏–Ω–∞—á–µ —ç—Ç–æ –æ—à–∏–±–∫–∞. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—à–∏ '—á—Ç–æ—Ç–æ', '–≥–¥–µ—Ç–æ'. –°–ª–µ–¥–∏ –∑–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—à–∏ —á–∞—Å—Ç–∏—Ü—É '—Ç–æ' —Å–ª–∏—Ç–Ω–æ —Å–æ —Å–ª–æ–≤–∞–º–∏ ‚Äî –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –¥–µ—Ñ–∏—Å: '—á—Ç–æ-—Ç–æ', '–≥–¥–µ-—Ç–æ', '–∫–æ–≥–¥–∞-—Ç–æ'. –°–ª–µ–¥–∏ –∑–∞ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π ‚Äî –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–≤—å —Ç–æ—á–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ—é–∑–∞. –í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–π –º—ã—Å–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é."},

                {"role": "user", "content": "–ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ —á—Ç–æ-—Ç–æ –∏ –≥–¥–µ-—Ç–æ."},
                {"role": "assistant", "content": "–ö–æ–≥–¥–∞ —Ç—ã —Ä–µ—à–∞–µ—à—å **—á—Ç–æ-—Ç–æ** –≤–∞–∂–Ω–æ–µ, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø–æ–¥—É–º–∞—Ç—å –æ —Ç–æ–º, **–≥–¥–µ-—Ç–æ** –≤ –ø—Ä–æ—à–ª–æ–º —Ç—ã —É–∂–µ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è —Å –ø–æ–¥–æ–±–Ω—ã–º. –°–ª–æ–≤–∞ —Ç–∏–ø–∞ \"—á—Ç–æ-—Ç–æ\", \"–≥–¥–µ-—Ç–æ\" –∏ \"–∫–æ–≥–¥–∞-—Ç–æ\" –ø–∏—à—É—Ç—Å—è —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å."},

                {"role": "user", "content": "–ù–∞–ø–∏—à–∏ —Å—Ç—Ä–æ–≥–æ, –º—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ —á—Ç–æ-—Ç–æ, –≥–¥–µ-—Ç–æ. –ù–µ –æ–±—Ä—ã–≤–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."},
                {"role": "assistant", "content": "–¢—ã –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∏—Ç—å, —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ, –±—Ä–∞—Ç. –ì–¥–µ-—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å. –ù–æ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥."},


                {"role": "user", "content": msg}
            ]

        }

        try:
            response = requests.post("https://api.groq.com/openai/v1/chat/completions", headers=headers, json=data_request)
            reply = response.json()["choices"][0]["message"]["content"]

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ —Å —É—á—ë—Ç–æ–º —Å–º—ã—Å–ª–∞
            max_chars = 900
            if len(reply) > max_chars:
                end = max(reply.rfind(".", 0, max_chars),
                          reply.rfind("?", 0, max_chars),
                          reply.rfind("!", 0, max_chars))
                if end != -1:
                    reply = reply[:end + 1]
                else:
                    reply = reply[:max_chars]

            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∞—Ç–∏–Ω–∏—Ü—ã –∏ –∞–∑–∏–∞—Ç—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            reply = re.sub(r'[a-zA-Z]', '', reply)  # –ª–∞—Ç–∏–Ω–∏—Ü–∞
            reply = re.sub(r'[‰∏Ä-ÈæØ„ÅÅ-„Çî„Ç°-„É¥„Éº„ÄÖ„ÄÜ„Ä§]', '', reply)  # —è–ø–æ–Ω—Å–∫–∏–π
            reply = re.sub(r'[‚∫Ä-Èøø]', '', reply)  # –∫–∏—Ç–∞–π—Å–∫–∏–π
            reply = re.sub(r'[^\w\s.,!?‚Äî‚Äì-]', '', reply)  # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º—É—Å–æ—Ä–Ω–æ–µ
            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∞—Ç–∏–Ω–∏—Ü—ã, –∞—Ä–∞–±—Å–∫–∏—Ö, –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∏ –ø—Ä–æ—á–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            reply = re.sub(r'[^\u0400-\u04FF0-9.,!?‚Äî‚Äì\s\n]', '', reply)
            reply = re.sub(r'\s{2,}', ' ', reply)  # —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            reply = reply.strip()  # —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ

            # üíæ –°–û–•–†–ê–ù–Ø–ï–ú –í–†–ï–ú–Ø –ó–ê–ü–†–û–°–ê
            data["last_ai_request"] = time.time()
            save_user_json(user_id, data)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(reply)

        except Exception as e:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Groq API: " + str(e))

#–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º
async def morning_message(app):
    for user_id in user_data:
        start = user_data[user_id]["start_date"]
        days = (datetime.date.today() - start).days
        await app.bot.send_message(
            chat_id=user_id,
            text=f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –î–µ–Ω—å {days}. –¢—ã –≤ –∏–≥—Ä–µ. –ù–µ —Å–¥–∞–≤–∞–π—Å—è üí™"
        )

async def evening_message(app):
    for user_id in user_data:
        await app.bot.send_message(
            chat_id=user_id,
            text="üåô –í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏. –ù–∞–ø–∏—à–∏ –æ—Ç—á—ë—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–µ–Ω—å –±—ã–ª —Ç—è–∂—ë–ª—ã–º. –¢—ã —Ä–∞—Å—Ç—ë—à—å!"
        )








# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token("8164293392:AAEJU4G3OLHydRiv6pmh9RboxrK50_X7TPc").build()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–æ–∫ –∫–æ–º–∞–Ω–¥
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("support", "–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º"),
        BotCommand("help", "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    ])

    # –û—Ç–∫–ª—é—á–∞–µ–º webhook
    await app.bot.delete_webhook(drop_pending_updates=True)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("support", support))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))

    # ‚è∞ —Å–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(morning_message, CronTrigger(hour=9, minute=00), args=[app])
    scheduler.add_job(evening_message, CronTrigger(hour=21, minute=0), args=[app])
    scheduler.add_job(autosave_all_users, CronTrigger(minute="*/3"))
    scheduler.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (—ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π polling)
    await app.run_polling()


if __name__ == "__main__":
    asyncio.run(main())
